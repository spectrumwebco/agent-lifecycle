"""
Tests for the Veigar exploit generator.

This module contains tests for the exploit generator component of the Veigar agent.
"""

import pytest
import os
from pathlib import Path
from unittest.mock import patch, MagicMock

import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '../..')))
from veigar.tools.pwn.exploit_generator import ExploitGenerator


class TestExploitGenerator:
    """Test suite for the ExploitGenerator class."""

    def setup_method(self):
        """Set up test environment before each test method."""
        self.generator = ExploitGenerator()
        self.test_vulnerabilities = {
            "sql_injection": {
                "type": "sql_injection",
                "file": "/path/to/test.py",
                "description": "Potential SQL injection vulnerability detected",
                "severity": "critical"
            },
            "xss": {
                "type": "xss",
                "file": "/path/to/test.js",
                "description": "Potential XSS vulnerability detected",
                "severity": "high"
            },
            "command_injection": {
                "type": "command_injection",
                "file": "/path/to/test.py",
                "description": "Potential command injection vulnerability detected",
                "severity": "critical"
            },
            "buffer_overflow": {
                "type": "buffer_overflow",
                "file": "/path/to/test.c",
                "description": "Use of unsafe functions that can lead to buffer overflow",
                "severity": "critical"
            },
            "format_string": {
                "type": "format_string",
                "file": "/path/to/test.c",
                "description": "Potential format string vulnerability detected",
                "severity": "high"
            },
            "unknown": {
                "type": "unknown_vulnerability",
                "file": "/path/to/test.txt",
                "description": "Unknown vulnerability type",
                "severity": "medium"
            }
        }

    def test_initialization(self):
        """Test that the generator initializes correctly."""
        assert hasattr(self.generator, "generate_exploit")
        assert hasattr(self.generator, "_generate_sql_injection_exploit")
        assert hasattr(self.generator, "_generate_xss_exploit")
        assert hasattr(self.generator, "_generate_command_injection_exploit")
        assert hasattr(self.generator, "_generate_buffer_overflow_exploit")
        assert hasattr(self.generator, "_generate_format_string_exploit")
        assert isinstance(self.generator.exploits, list)
        assert len(self.generator.exploits) == 0

    def test_generate_sql_injection_exploit(self):
        """Test generating a SQL injection exploit."""
        exploit = self.generator._generate_sql_injection_exploit(self.test_vulnerabilities["sql_injection"])
        
        assert exploit["vulnerability"] == self.test_vulnerabilities["sql_injection"]
        assert "exploit_code" in exploit
        assert "' OR '1'='1" in exploit["exploit_code"]
        assert "description" in exploit
        assert "mitigation" in exploit
        assert "parameterized queries" in exploit["mitigation"].lower()

    def test_generate_xss_exploit(self):
        """Test generating an XSS exploit."""
        exploit = self.generator._generate_xss_exploit(self.test_vulnerabilities["xss"])
        
        assert exploit["vulnerability"] == self.test_vulnerabilities["xss"]
        assert "exploit_code" in exploit
        assert "<script>" in exploit["exploit_code"]
        assert "description" in exploit
        assert "mitigation" in exploit
        assert "encoding" in exploit["mitigation"].lower()

    def test_generate_command_injection_exploit(self):
        """Test generating a command injection exploit."""
        exploit = self.generator._generate_command_injection_exploit(self.test_vulnerabilities["command_injection"])
        
        assert exploit["vulnerability"] == self.test_vulnerabilities["command_injection"]
        assert "exploit_code" in exploit
        assert ";" in exploit["exploit_code"]  # Command separator
        assert "id" in exploit["exploit_code"]  # Common command to execute
        assert "description" in exploit
        assert "mitigation" in exploit
        assert "allowlists" in exploit["mitigation"].lower()

    def test_generate_buffer_overflow_exploit(self):
        """Test generating a buffer overflow exploit."""
        exploit = self.generator._generate_buffer_overflow_exploit(self.test_vulnerabilities["buffer_overflow"])
        
        assert exploit["vulnerability"] == self.test_vulnerabilities["buffer_overflow"]
        assert "exploit_code" in exploit
        assert len(exploit["exploit_code"]) > 100  # Should be a long string
        assert "A" * 10 in exploit["exploit_code"]  # Should contain repeated 'A's
        assert "description" in exploit
        assert "mitigation" in exploit
        assert "bounds checking" in exploit["mitigation"].lower()

    def test_generate_format_string_exploit(self):
        """Test generating a format string exploit."""
        exploit = self.generator._generate_format_string_exploit(self.test_vulnerabilities["format_string"])
        
        assert exploit["vulnerability"] == self.test_vulnerabilities["format_string"]
        assert "exploit_code" in exploit
        assert "%x" in exploit["exploit_code"]  # Format specifier
        assert "description" in exploit
        assert "mitigation" in exploit
        assert "printf" in exploit["mitigation"].lower()

    def test_generate_exploit_for_sql_injection(self):
        """Test generating an exploit for SQL injection vulnerability."""
        exploit = self.generator.generate_exploit(self.test_vulnerabilities["sql_injection"])
        
        assert exploit["vulnerability"] == self.test_vulnerabilities["sql_injection"]
        assert "exploit_code" in exploit
        assert "' OR '1'='1" in exploit["exploit_code"]
        assert "description" in exploit
        assert "mitigation" in exploit

    def test_generate_exploit_for_xss(self):
        """Test generating an exploit for XSS vulnerability."""
        exploit = self.generator.generate_exploit(self.test_vulnerabilities["xss"])
        
        assert exploit["vulnerability"] == self.test_vulnerabilities["xss"]
        assert "exploit_code" in exploit
        assert "<script>" in exploit["exploit_code"]
        assert "description" in exploit
        assert "mitigation" in exploit

    def test_generate_exploit_for_command_injection(self):
        """Test generating an exploit for command injection vulnerability."""
        exploit = self.generator.generate_exploit(self.test_vulnerabilities["command_injection"])
        
        assert exploit["vulnerability"] == self.test_vulnerabilities["command_injection"]
        assert "exploit_code" in exploit
        assert ";" in exploit["exploit_code"]
        assert "description" in exploit
        assert "mitigation" in exploit

    def test_generate_exploit_for_buffer_overflow(self):
        """Test generating an exploit for buffer overflow vulnerability."""
        exploit = self.generator.generate_exploit(self.test_vulnerabilities["buffer_overflow"])
        
        assert exploit["vulnerability"] == self.test_vulnerabilities["buffer_overflow"]
        assert "exploit_code" in exploit
        assert len(exploit["exploit_code"]) > 100
        assert "description" in exploit
        assert "mitigation" in exploit

    def test_generate_exploit_for_format_string(self):
        """Test generating an exploit for format string vulnerability."""
        exploit = self.generator.generate_exploit(self.test_vulnerabilities["format_string"])
        
        assert exploit["vulnerability"] == self.test_vulnerabilities["format_string"]
        assert "exploit_code" in exploit
        assert "%x" in exploit["exploit_code"]
        assert "description" in exploit
        assert "mitigation" in exploit

    def test_generate_exploit_for_unknown_vulnerability(self):
        """Test generating an exploit for an unknown vulnerability type."""
        exploit = self.generator.generate_exploit(self.test_vulnerabilities["unknown"])
        
        assert exploit["vulnerability"] == self.test_vulnerabilities["unknown"]
        assert "exploit_code" in exploit
        assert "No specific exploit template" in exploit["exploit_code"]
        assert "description" in exploit
        assert "mitigation" in exploit
        assert "best practices" in exploit["mitigation"]

    def test_generate_exploit_with_missing_type(self):
        """Test generating an exploit for a vulnerability with missing type."""
        vulnerability = {
            "file": "/path/to/test.py",
            "description": "Some vulnerability",
            "severity": "medium"
        }
        exploit = self.generator.generate_exploit(vulnerability)
        
        assert exploit["vulnerability"] == vulnerability
        assert "exploit_code" in exploit
        assert "No specific exploit template" in exploit["exploit_code"]
        assert "description" in exploit
        assert "mitigation" in exploit

    def test_generate_exploit_with_empty_vulnerability(self):
        """Test generating an exploit for an empty vulnerability."""
        exploit = self.generator.generate_exploit({})
        
        assert exploit["vulnerability"] == {}
        assert "exploit_code" in exploit
        assert "No specific exploit template" in exploit["exploit_code"]
        assert "description" in exploit
        assert "mitigation" in exploit
